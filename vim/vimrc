scripteconding utf-8

" needs to be first line
set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'gmarik/Vundle.vim'

Plugin 'kchmck/vim-coffee-script'
Plugin 'kien/ctrlp.vim'
Plugin 'tpope/vim-endwise'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-haml'
Plugin 'tpope/vim-markdown'
Plugin 'tpope/vim-rails'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-repeat'
Plugin 'scrooloose/syntastic'
Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'SirVer/ultisnips'
Plugin 'godlygeek/tabular'
Plugin 'majutsushi/tagbar'
Plugin 'vim-ruby/vim-ruby'
Plugin 'Lokaltog/vim-powerline'
Plugin 'vim-scripts/nginx.vim'
Plugin 'vim-scripts/AutoTag'
Plugin 'vim-scripts/LargeFile'
Plugin 'mattn/emmet-vim'
Plugin 'pangloss/vim-javascript'
Plugin 'aalvarado/ultisnips-snippets.git'
Plugin 'docunext/closetag.vim'
Plugin 'nono/vim-handlebars'
Plugin 'briancollins/vim-jst'
Plugin 'jinfield/vim-nginx'
Plugin 'sjbach/lusty'
Plugin 'ervandew/supertab.git'
Plugin 'scrooloose/nerdcommenter'
Plugin 'AndrewRadev/vim-eco'
Plugin 'mxw/vim-jsx'

" Themes
Plugin 'altercation/vim-colors-solarized'
Plugin 'larssmit/vim-getafe'
Plugin 'wesgibbs/vim-irblack'

call vundle#end()
filetype plugin indent on

" Because we care for your eyes
set background=dark

:colorscheme koehler

if filereadable(expand("~/.vimrc.before"))
  source ~/.vimrc.before
endif

set hidden
set number
set ts=2 sts=2 sw=2 expandtab
syntax on
" Because it never works well
setglobal nobomb

" Lots of history
set history=1000

" Don't include hidden buffers in autocomplete
set complete=.,b,u,t

" Make cmdline tab completion similar to bash
set wildmode=list:longest

" I'm pretty sure this works for everyone
set term=screen-256color

" Shorter messages
set shortmess+=I

if has('mouse')
  set mouse=a
endif

" Lets use smartcase
set smartcase

" No wrapping please
set nowrap

" Don't resize split views automatically
set noequalalways

" Always show status line
set laststatus=2

" Enable ctrl-n and ctrl-p to scroll thru matches
set wildmenu
"
"stuff to ignore when tab completing
set wildignore=*.o,*.obj,*~

" Minimal lines above and below the cursor
set scrolloff=5
" Minimal number of lines to scroll when the cursor gets off the screen
set scrolljump=5

" No toolbars
set guioptions=i

" Only render when necessary
set lazyredraw

" Autoindent because lazy
set autoindent

" Backspace over indent,eol,start
set backspace=indent,eol,start

" Use symbols to represent white space
set list
set listchars=tab:➙.,trail:·,extends:❱,precedes:❰,nbsp:░

" Set enconding and file encoding to utf-8
set encoding=utf-8
set fileencoding=utf-8

" Nice tweaks below --v

" Remap leader to space
let mapleader = " "

" Remove highlights after searching
nmap <silent> <leader>/ :nohlsearch<CR>

" Change working directory to the current one
cmap cwd lcd %:p:h
cmap cd. lcd %:p:h

" Make lists easier to fill
inoremap {<CR>  {<CR>}<Esc>O<tab>
inoremap (<CR>  (<CR>)<Esc>O<tab>
inoremap [<CR>  [<CR>]<Esc>O<tab>

" When G is used don't stick to bottom
nn G G10<c-e>

" Autoescape motion
imap jj <esc>

" Shift enter, creates two lines and indents one above
inoremap <s-cr> <cr><cr><up><tab>

" Handle trailing whitespace, shamelessly taken from http://vimcasts.org/episodes/tidying-whitespace/
function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

autocmd BufWritePre *.rb,*.coffee,*.yml,*.haml,*.erb,*.php,*.java,*.py,*.js,*.html,*.eco :call <SID>StripTrailingWhitespaces() " Run this method on save

" Sets ultisnips from the aalvarado/ultisnips-snippets folder
if !exists("g:UltiSnipsSnippetsDir")
  " Sets right folder to read and write
  let g:UltiSnipsSnippetsDir="~/.vim/bundle/ultisnips-snippets"
  let g:UltiSnipsSnippetDirectories=["bundle/ultisnips-snippets"]
  let g:UltiSnipsEditSplit="horizontal"
" Conflicts with diagraphs, switching <c-k> to <c-l>
" use :redraw instead of <c-l> on insert mode
  let g:UltiSnipsJumpBackwardTrigger = "<c-l>"
endif

" Surround
" Use v or # to get a variable interpolation (inside of a string)}
" ysiw# Wrap the token under the cursor in #{}
" v...s# Wrap the selection in #{}
let g:surround_113 = "#{\r}" " v
let g:surround_35 = "#{\r}" " #

" Syntastic
let g:syntastic_enable_signs=1
let g:syntastic_auto_loc_list=2

" Matchit is included in vim, it only needs to be activated
runtime macros/matchit.vim

" Tag bar is toggled with f8
nmap <F8> :TagbarToggle<CR><C-W>l

if filereadable(expand("~/.vimrc.after"))
  source ~/.vimrc.after
endif

let g:closetag_html_style=1
autocmd FileType html,xhtml,xml,htmldjango,jinjahtml,eruby,mako,eco silent!
" vim: filetype=vim
