#!/usr/bin/env bash

# Options
#
# -e, --extension
# Set backup extension prefix (.old) is default
#
# -p, --path
# Set pathname from which to create backups
#
# -r, --restore

set -e

path="$HOME"
extension=".old"
operation="backup"

# Check if path exist (file or directory)
check_path () {
  local path_exists
  path_exists=""

  [ -f "$1" ] || [ -d "$1" ] && path_exists="1"

  echo $path_exists
}

# Get linkable paths
linkables () {
  ls -d $PWD/*/.* -1 | grep -v '\/.\{1,2\}$'
}

# Introspect the dotfiles directories and find files to rename
backup () {
  local original
  
  # Rename files using path and extension
  for file in `linkables`; do
    original="${path}/$(basename -- $file)"
    path_exists="$(check_path "$original")"

    # Only rename if path exist and it's not a link
    if [[ $path_exists != "" ]] && ! [[ -L "$original" ]]; then
      mv "$original" "${original}${extension}"
    fi
  done
}

# Introspect the dotfiles and find matching files with extension
restore () {
  local backed

  # Rename/Restore files if found and not linked anymore
  for file in `linkables`; do
    original="${path}/$(basebane -- $file)"
    path_exists="$(check_path "$original")"

    # Only rename if path does not exist
    if [[ $path_exists == "" ]]; then
      mv "${original}${extension}" "${original}"
    fi
  done
}

# Check arguments
while [ "$#" -gt 0 ]; do
  case "$1" in
    -e | --extension)
      extension="$2"
      shift 2
      ;;
    -p | --path)
      path="$2"
      shift 2
      ;;
    -r | --restore)
      operation="restore"
      ;;
    * )
      echo "Unknown option: $1"
      exit 1
      ;;
  esac
done

case "$operation" in
  restore) restore ;;
  *) backup ;;
esac