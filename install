#!/usr/bin/env bash

# Where we're at right now
START_WD=$(pwd -P)

# What dotfiles branch we want to install
BRANCH_NAME=$1

# All the colors we're using for notifications
SWITCH="\033["
RED="${SWITCH}0;31m"
GREEN="${SWITCH}0;32m"
YELLOW="${SWITCH}1;33m"
NORMAL="${SWITCH}0m"

set -e
echo ''

# Print red
error () {
  printf "\r${RED}$1${NORMAL}\n"
  exit
}

# Print green
success () {
  printf "\r${GREEN}$1${NORMAL}\n"
}

# Print yellow
info () {
  printf "\r${YELLOW}$1${NORMAL}\n"
}

install_rbenv () {
  info "Installing rbenv for you..."

  RBENV_PATH="\$HOME/.rbenv/bin:\$PATH"

  # Fetching rbenv from git
  git clone https://github.com/sstephenson/rbenv.git ~/.rbenv
  PATH=$(eval expr $RBENV_PATH)

  if [ $(which rbenv) ]; then
    success "rbenv installed"
    info "fetching ruby-build..."

    cd ~/.rbenv && git clone https://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build

    if [[ $? == 0 ]]; then
      success "ruby-build installed"

      # Add rbenv to our path
      echo "export PATH=\"$RBENV_PATH\"" >> ~/.bash_profile.before
      echo 'eval "$(rbenv init -)"' >> ~/.bash_profile.before
      source ~/.bash_profile.before
    fi
  fi
}

fetch_dotfiles () {
  info "Fetching dotfiles..."

  # Figure out the branch we're working on
  if ! [ $BRANCH_NAME ]; then BRANCH_NAME=master; fi

  git clone -b $BRANCH_NAME https://github.com/cloverinteractive/dotfiles.git ~/.dotfiles
  cd ~/.dotfiles

  # Setup submodules to get Vundle working
  git submodule init
  git submodule update

  info "Installing ruby..."
  rbenv install

  if [[ $? == 0 ]]; then
    success "ruby installed"
  fi
}

install () {
  info "Installing dotfiles..."

  cd ~/.dotfiles

  # Install the ruby bundler
  gem install bundler && rbenv rehash

  # Install ruby dependecies and run Rake tasks
  bundle install
  rake install

  if [[ $? == 0 ]]; then
    # Let's move back to where we ran the installer from
    cd $START_WD

    # Add new bash config into possibly existing .profile or .bashrc
    if [ -f "$HOME/.bashrc" ];  then echo ". ~/.bash_profile" >> ~/.bashrc; fi
    if [ -f "$HOME/.profile" ]; then echo ". ~/.bash_profile" >> ~/.profile; fi

    success "dotfiles generated"
  fi
}

install_homebrew () {
  info "Installing Homebrew..."

  HOMEBREW_PATH="/usr/local/bin:/usr/local/sbin:\$PATH"

  ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  PATH=$(eval expr $HOMEBREW_PATH)

  # If installed Homebrew successfully
  if [[ $? == 0 ]]; then
    success "Homebrew installed"

    ## Load homebrew
    echo "export PATH=\"$HOMEBREW_PATH\"" >> ~/.bash_profile.before
  fi
}

install_debian () {
  sudo apt-get -qq install -y build-essential curl git ruby texinfo libbz2-dev libcurl4-openssl-dev libexpat-dev libncurses-dev zlib1g-dev libreadline-dev libssl-dev

  if [[ $? == 0 ]]; then
    success "DEBs installed!"
  else
    error "Could not install required packages."
  fi
}

satisfy_linux_deps () {
  info "Trying to install dependencies..."

  if  [[ $(uname -a | grep -i '\(ubuntu\|debian\)') || $(which apt-get) ]]; then
    install_debian
  else
    error "Dependencies not met: Could not find a suitable package manager or packages"
  fi
}

install_linuxbrew () {
  satisfy_linux_deps

  info "Installing Linuxbrew..."
  sh -c "$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)"

  # If installed Linuxbrew successfully
  if [[ $? == 0 ]]; then
    success "Linuxbrew installed"

    ## Load Linuxbrew
    test -d ~/.linuxbrew && eval $(~/.linuxbrew/bin/brew shellenv)
    test -d /home/linuxbrew/.linuxbrew && eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)
    test -r ~/.bash_profile && echo "eval \$($(brew --prefix)/bin/brew shellenv)" >>~/.bash_profile
    echo "eval \$($(brew --prefix)/bin/brew shellenv)" >>~/.profile
  fi
}

# Install correct brew if not in PATH
if ! [ $(which brew) ]; then
  if [[ $(uname) == "Darwin" ]]; then
    install_homebrew
  else
    install_linuxbrew
  fi
fi

if ! [ $(which rbenv) ]; then install_rbenv; fi
if ! [ -d "$HOME/.dotfiles" ]; then fetch_dotfiles; fi

# Compile i3-gaps after submodules have been updated
# This whole block is linux specific
if [[ $(uname) == "Linux" ]]; then
  info "Copying configuration files"

  DOTFILES_PATH=$HOME/.dotfiles

  ## Copy Desktop related files
  cp    $DOTFILES_PATH/xinitrc                        $HOME/.xinitrc
  cp    $DOTFILES_PATH/terminal-emulators/Xresources  $HOME/.Xresources

  info "Setup fonts for desktop environment"

  if ! [ -d "$HOME/.fonts" ]; then mkdir $HOME/.fonts; fi

  #cp $DOTFILES_PATH/fonts/Font-Awesome/fonts/*.otf  $HOME/.fonts
  #cp $DOTFILES_PATH/fonts/san-francisco/*.otf       $HOME/.fonts
fi

install

success "Thanks for installing, please report any issues to https://github.com/cloverinteractive/dotfiles/issues"
info "Run source ~/.bash_profile to load your environment"
